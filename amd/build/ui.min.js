define("tiny_filterws/ui",["exports","./options","./selectors","core/str","tiny_filterws/modal","core/modal_events","core/modal_factory"],(function(_exports,_options,_selectors,_str,_modal,_modal_events,_modal_factory){function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}
/**
   * Tiny Filter WS Content configuration.
   *
   * @module      tiny_filterws/commands
   * @copyright   2022 Dani Palou <dani@moodle.com>
   * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
   */Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.handleAction=void 0,_selectors=_interopRequireDefault(_selectors),_modal=_interopRequireDefault(_modal),_modal_events=_interopRequireDefault(_modal_events),_modal_factory=_interopRequireDefault(_modal_factory);let openingSelection=null,helpStrings=null;_exports.handleAction=editor=>{openingSelection={selection:editor.selection,bookmark:editor.selection.getBookmark()},displayDialogue(editor)};const getTemplateContext=async(editor,data)=>{const predefinedFilters=(0,_options.getPredefinedFilters)(editor).map(((filter,index)=>(filter.index=index,filter)));return Array.from(Object.entries(await getHelpStrings())).forEach((_ref=>{let[key,text]=_ref;data["".concat(key.toLowerCase(),"helpicon")]={text:text}})),Object.assign({},{elementid:editor.id,haspredefinedfilters:predefinedFilters&&predefinedFilters.length>0,predefinedfilters:predefinedFilters},data)},getHelpStrings=async()=>{if(!helpStrings){const[filterUserAgent,origin]=await(0,_str.get_strings)(["filteruseragent_help","origin_help"].map((key=>({key:key,component:"tiny_filterws"}))));helpStrings={filterUserAgent:filterUserAgent,origin:origin}}return helpStrings},displayDialogue=async function(editor){let data=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const modal=await _modal_factory.default.create({type:_modal.default.TYPE,templateContext:await getTemplateContext(editor,data)});modal.show();const $root=modal.getRoot(),root=$root[0];$root.on(_modal_events.default.save,((event,modal)=>{handleDialogueSubmission(editor,modal)})),root.addEventListener("click",(e=>{if(!e.target.closest(_selectors.default.applyPredefined))return;const predefinedFilters=(0,_options.getPredefinedFilters)(editor),predefinedInput=root.querySelector(_selectors.default.inputPredefined),predefinedFilter=predefinedFilters[Number(predefinedInput&&predefinedInput.value)];if(!predefinedFilter)return void console.warn("Predefined filter not found",predefinedInput&&predefinedInput.value);const inputOrigin=root.querySelector(_selectors.default.inputOrigin);inputOrigin&&(inputOrigin.value=predefinedFilter.origin);const inputUserAgent=root.querySelector(_selectors.default.inputUserAgent);inputUserAgent&&(inputUserAgent.value=predefinedFilter.useragent)}))},handleDialogueSubmission=async(editor,modal)=>{const root=modal.getRoot()[0],inputOrigin=root.querySelector(_selectors.default.inputOrigin),inputUserAgent=root.querySelector(_selectors.default.inputUserAgent),origin=inputOrigin&&inputOrigin.value||"any",userAgent=inputUserAgent&&inputUserAgent.value||"",openingTag="{fws "+origin+(userAgent?' ua="'+userAgent+'"':"")+"}",content=openingSelection.selection.getContent().replace(/([^\\])\n/g,"$1");editor.selection.moveToBookmark(openingSelection.bookmark),editor.execCommand("mceInsertContent",!1,openingTag+content+"{fws}"),editor.selection.moveToBookmark(openingSelection.bookmark)}}));

//# sourceMappingURL=ui.min.js.map